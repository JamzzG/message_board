posts.models.py
        from django.db import models


        class Post(models.Model): #inheritance or polymorphism  (inheriting the Model class)
            title = models.Charfield(max_length=128) #composition (handles db side and text fields)
            subtitle = models.Charfield(max_length=128)
            body = models.TextField()
            created_on = models.DateTimeField(auto_now_add=True)

            def __str__(self):   
                return self.title
                                    #by redefining the rules here we will now see the title of each post instead of the generic Post (1), Post (2) etc on the DJANGO admin save.


        To see what we just did:

            1) create a migration 
                on the terminal enter:
                    python3 manage.py makemigrations
            2) run the migration
                    python3 manage.py migrate 



            

    0001__initial.py will start counting up with each iteration (version control)
        migrations files are auto generated
                initial will always = True
            after that only 
                dependencies and operations

posts.admin.py we added:

        from .models import Post

        admin.site.register(Post)

create new superuser in terminal:
        python3 manage.py createsuperuser

then run the development server:
        python3 manage.py runserver



posts.views.py 

    DELETE everything

        from django.views.generic import ListView 
        from .models import Post

        class PostListView(ListView):
                template_name = "list.html
                model = Post

            ***purpose driven views return a context driven object:
            to acccess this data we use the dot operator.
            default naming scheme.  Post_List



create list.html in templates

        {% extends 'base.html' %}


        {% block title %}Posts{% endblock title %}

        {% block content %}
        <h1>Posts</h1>
        <ul>
            {% for post in post_list %}  #for is a control flow statement.  It must have 
                                            an  ending statement
            <li>
                {{ post.title }}
            </li>
            {% endfor %}  #only way to tell JINJA to stop looping through FOR statement.
        </ul>
        {% endblock content %}



in posts folder create urls.py
            posts.urls.py:
                    from django.urls import path
            from .views import PostListView

            urlpatterns = [
                path("", PostListView.as_view(), name="list"),
]






in posts.views.py added
    from django.views.generic.edit import CreateView

and added the class:
    class PostCreateView(CreateView):
            template_name = "new.html"
            model = Post
            fields = ["title", "subtitle", "body"]   
                            # (These fields were defined in models.py first)


templates.new.html:

        % extends 'base.html' %


        {% block title %}New Post{% endblock title %}


        {% block content %} 
        <h1>New Post</h1>
        <form method="POST">
            {% csrf_token %}  
            {{ form.as_p }}    #renders the form as a p paragraph
            <input type= "submit" value="Create" class="btn btn-success">
        </form>
        {% endblock content %}

            Cross Site Request Forgery attacks (csrf_token protects against)
            renders a hidden token to validate the integrity of the request.
            
            form.as_p                more as_div, as_p as_table as_ul

posts.urs.py
    added 
        PostCreateView to be imported from .views

    and 
       path{"new/", PostCreateView.as_view(), name="new"},

posts.views.py
    added:
        DetailView
    and defined
        PostDetailView class with a template and model.
            USING IDS


Homework
       web developer tools and SASS course UDEMY.


post.urls.py
    added import from .views
        PostDetailViews
            added () to break it into multiple lines.

    added to urlpatterns:
        path("<int:pk>/", PostDetailView.as_view(), name="detail")
            reads a urls parameter (PK=Primary Key) converts it into an integer.
                selectall from post where id = PK


templates.list.html:

changed <li> lines to:
   
            <li><a href="{% url 'detail' post.id %}">
                {{ post.title }}
            </a>
                
            </li>


            in posts.models.py
                changed:
                    return reverse("list")
                    to:
                         def get_absolute_url(self):
        return reverse("detail", arg=[self.id]) 
  